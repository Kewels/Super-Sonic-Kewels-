Patch "Disable Damage" in "Cheats" by "Hyper"
{
    WriteProtected<byte>
    (
        /* 0x1407EE68A */
        ScanSignature
        (
            "\x0F\x84\x2C\x01\x00\x00\x83\xEA\x02",
            "xxxxxxxxx"
        ),

        0xE9, 0x1A, 0x02, 0x00, 0x00
    );
}

Patch "Always Have Phantom Rush" in "Cheats" by "NM"
{
    WriteNop
    (
        /* 0x140779819 */
        ScanSignature
        (
            "\x72\x09\x66\x83\x89\xF0\x00\x00\x00\x40\xC3\x0F\x2F\xC2\x77\x0C\xB8\xBF\xFF\x00\x00\x66\x21\x81\xF0\x00\x00\x00\xC3",
            "x?xxx????xxxxxx?xxxxxxxx????x"
        ),

        2
    );
}

Patch "Fix Grind Leaning" in "Fixes" by "Hyper"
//
    static float Bias = 1.0f;
//
{
    fixed (float* pBias = &Bias)
    {
        WriteAsmHook
        (
            $@"
                mov   rdx, {(long)pBias}
                movss xmm2, dword ptr [rdx]
                movss dword ptr [rsi + 0xD8], xmm0
                mov   rdx, {(long)System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi("SPEED_RATIO")}
            ",

            /* 0x14084AD71 */
            ScanSignature
            (
                "\x0F\x28\xD0\xF3\x0F\x11\x86\xD8\x00\x00\x00",
                "xxxxxxxxxxx"
            ),

            HookBehavior.Replace
        );
    }
}

Patch "Super Stomp" in "Gameplay" by "Hyper & Yosho"
//
    static float StompingTime = 0.0f;
    static float SuperStompThreshold = 0.35f;
//
{
    fixed (float* pStompingTime = &StompingTime)
    fixed (float* pSuperStompThreshold = &SuperStompThreshold)
    {
        // Create timer for stomping.
        WriteAsmHook
        (
            $@"
                mov    r15, [rcx + 0x18]
                mov    rdi, rcx
                mov    rcx, {(long)pStompingTime}
                movss  xmm8, dword ptr [rcx]
                addss  xmm8, xmm1
                movss  dword ptr [rcx], xmm8
                mov    rcx, r15
                movaps xmmword ptr [rsp + 0xA0 + 0xFFFFFFFFFFFFFFD0], xmm7
            ",

            /* 0x140801905 */
            ScanSignature
            (
                "\x4C\x8B\x79\x18\x48\x8B\xF9\x49\x8B\xCF",
                "xxxxxxxxxx"
            ),

            HookBehavior.Replace
        );

        /* 0x140857928 */
        long shockwaveCondAddr = ScanSignature
        (
            "\xE8\xCC\xCC\xCC\xCC\x83\xBE\xB0\x00\x00\x00\x02\x48\x8B\xE8",
            "x????xxxxxxxxxx"
        );

        /* 0x1407C2050 */
        long getParameterFuncAddr = shockwaveCondAddr + Read<int>(shockwaveCondAddr + 1) + 5;

        // Set stomp shockwave condition.
        WriteAsmHook
        (
            $@"
                mov    rax, {getParameterFuncAddr}
                call   rax
                mov    rbp, {(long)pStompingTime}
                movss  xmm8, dword ptr [rbp]
                mov    rbp, {(long)pSuperStompThreshold}
                movss  xmm9, dword ptr [rbp]
                comiss xmm8, xmm9
                mov    ebp, dword ptr [rsi + 0xB0] ; preserve stomp bounce count
                jna    exit
                mov    dword ptr [rsi + 0xB0], 2   ; force stomp bounce count to meet condition requirements
            exit:
                cmp    dword ptr [rsi + 0xB0], 2
                mov    dword ptr [rsi + 0xB0], ebp ; restore stomp bounce count
                mov    rbp, {(long)pStompingTime}
                mov    dword ptr [rbp], 0
                mov    rbp, rax
            ",

            shockwaveCondAddr,

            HookBehavior.Replace
        );

        /* TODO: create a library for checking Sonic flags (e.g. IsGrounded)
           and use that for resetting the timer instead. */

        // Reset stomping timer for successful stomp attacks.
        WriteAsmHook
        (
            $@"
                mov edx, 0x0C
                mov rcx, {(long)pStompingTime}
                mov dword ptr [rcx], 0
                mov rcx, rsi
            ",

            /* 0x14B5B7C8B */
            ScanSignature
            (
                "\x8B\x0D\xCC\xCC\xCC\xCC\x81\xF1\x44\x8B\x8A\xE9",
                "xx????xxxxxx"
            ),

            HookBehavior.Replace
        );

        // Reset stomping timer when grinding.
        WriteAsmHook
        (
            $@"
                mov    rcx, {(long)pStompingTime}
                mov    dword ptr [rcx], 0
                movaps xmmword ptr [rsp + 0x68 + 0xFFFFFFFFFFFFFFC8], xmm8
                mov    rcx, rdx
                movaps xmm8, xmm2
                mov    rbx, rdx
            ",

            /* 0x14B42EA3D */
            ScanSignature
            (
                "\x44\x0F\x29\x44\x24\x30\x48\x89\xD1",
                "xxxxxxxxx"
            ),

            HookBehavior.Replace
        );

        // Reset stomping timer if taking damage.
        WriteAsmHook
        (
            $@"
                mov  rax, {(long)pStompingTime}
                mov  dword ptr [rax], 0
                mov  rax, [rbx + 0x38]
                mov  rcx, [rax + 0x108]
                test rcx, rcx
            ",

            /* 0x140839E8D */
            ScanSignature
            (
                "\x48\x8B\x43\x38\x48\x8B\x88\x08\x01\x00\x00\x48\x85\xC9\x74\x1C\xBA\xDC\x40\x0E\x2D",
                "xxxxxxxxxxxxxxxxxxxxx"
            ),

            HookBehavior.Replace
        );
    }
}

Patch "Reduced Homing Delay" in "Physics" by "Hyper"
//
    static float Delay = 0.2f;
//
{
    fixed (float* pDelay = &Delay)
    {
        WriteAsmHook
        (
            $@"
                push  rbx
                mov   rbx, {(long)pDelay}
                movss xmm2, dword ptr [rbx]
                mov   edx, eax
                mov   rcx, r13
                mov   dword ptr [rbp + 0x57 + 0x28], eax
                pop   rbx
            ",

            /* 0x14082379C */
            ScanSignature
            (
                "\xF3\x41\x0F\x10\x54\x3F\x18",
                "xxxxxxx"
            ),

            HookBehavior.Replace
        );
    }
}

Patch "Retain Ground Velocity for Jump" in "Physics" by "Hyper"
//
    static bool IsStateJump = false;
//
{
    fixed (bool* pIsStateJump = &IsStateJump)
    {
        // StateJumpStart
        WriteAsmHook
        (
            $@"
                mov  rbx, [rdx + 0x48]
                mov  rsi, rdx
                mov  rbp, rcx
                mov  edx, 0x25
                push rax
                mov  rax, {(long)pIsStateJump}
                mov  byte ptr [rax], 1
                pop  rax
            ",

            /* 0x14B462638 */
            ScanSignature
            (
                "\x48\x8B\x5A\x48\x48\x89\xD6\x48\x89\xCD\xBA\x25\x00\x00\x00",
                "xxxxxxxxxxxxxxx"
            ),

            HookBehavior.Replace
        );
        
        /* v1.20: 0x1407F44EF */
        var callerFuncAddr = ScanSignature
        (
            "\xE8\xCC\xCC\xCC\xCC\x48\x8B\x43\x20\xBA\x20\x16\x1E\x71",
            "x????xxxxxxxxx"
        );

        /* v1.20: 0x1407C3B50 */
        var mainFuncAddr = callerFuncAddr + Read<int>(callerFuncAddr + 0x01) + 0x05;

        // Update posture to allow retaining ground velocity.
        WriteAsmHook
        (
            $@"
                mov rdi, rcx

                ; Check if we're in the jump state
                push r11
                mov  r11, {(long)pIsStateJump}
                mov  r11b, byte ptr [r11]
                cmp  r11b, 0
                jz   default
                mov  al, 1
                jmp  exit

            default:
                xor  edx, edx
                mov  rcx, [rcx + 0x28] ; RCX = BlackboardStatus
                mov  rax, [rcx + 0x38] ; RAX = bit flags
                mov  edx, edx
                bt   rax, rdx
                setb al

            exit:
                pop r11
            ",

            /* 0x1407C3B56 */
            mainFuncAddr + 6,

            HookBehavior.Replace
        );

        // StateJumpEnd
        WriteAsmHook
        (
            $@"
                xor  ecx, 0x1B120AB6
                mov  edx, ecx
                mov  edi, r8d
                mov  rcx, [rax + 0x80]
                push rax
                mov  rax, {(long)pIsStateJump}
                mov  byte ptr [rax], 0
                pop  rax
            ",

            /* 0x14B47F0A7 */
            ScanSignature
            (
                "\x81\xF1\xB6\x0A\x12\x1B",
                "xxxxxx"
            ),

            HookBehavior.Replace
        );
    }
}

Patch "Fix Stomp Reset" in "Fixes" by "Hyper"
{
    WriteNop
    (
        /* 0x140895AC0 */
        ScanSignature
        (
            "\x74\x1C\x45\x33\xC0\x48\x8B\xCB\x41\x8D\x50\x34",
            "xxxxxxxxxxxx"
        ),

        2
    );
}